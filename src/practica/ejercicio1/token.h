# ifndef CONST_H_
# define CONST_H_

# define TOKEN_DIGITO "DIGITO"
# define TOKEN_LETRA "LETRA"
# define TOKEN_CODIGO_POSTAL "CODIGO_POSTAL"
# define TOKEN_ARG_AUTO "ARG_AUTO"
# define TOKEN_ARG_MOTO "ARG_MOTO"
# define TOKEN_BRA_AUTO "BRA_AUTO"
# define TOKEN_BRA_MOTO "BRA_MOTO"
# define TOKEN_BOL_AUTO "BOL_AUTO"
# define TOKEN_PAR_AUTO "PAR_AUTO"
# define TOKEN_PAR_MOTO "PAR_MOTO"
# define TOKEN_URU_AUTO_MOTO "URU_AUTO_MOTO"
# define TOKEN_PATENTE_MERCOSUR "PATENTE_MERCOSUR"
# define TOKEN_COMENTARIO "COMENTARIO"
# define TOKEN_ID "ID"
# define TOKEN_CONSTANTE_DECIMAL "CONSTANTE_DECIMAL"
# define TOKEN_CONSTANTE_OCTAL "CONSTANTE_OCTAL"
# define TOKEN_CONSTANTE_HEXA "CONSTANTE_HEXA"
# define TOKEN_CONSTANTE_BINARIA "CONSTANTE_BINARIA"
# define TOKEN_CONSTANTE_FLOTANTE "CONSTANTE_FLOTANTE"
# define TOKEN_CONSTANTE_STRING "CONSTANTE_STRING"
# define TOKEN_RW_IF "RW_IF"
# define TOKEN_RW_WHILE "RW_WHILE"
# define TOKEN_RW_DECVAR "RW_DECVAR"
# define TOKEN_RW_ENDDEC "RW_ENDDEC"
# define TOKEN_RW_INTEGER "RW_INTEGER"
# define TOKEN_RW_FLOAT "RW_FLOAT"
# define TOKEN_RW_WRITE "RW_WRITE"  
# define TOKEN_OP_EQ "OP_EQ"
# define TOKEN_OP_NEQ "OP_NEQ"
# define TOKEN_OP_GE "OP_GE"
# define TOKEN_OP_LE "OP_LE"
# define TOKEN_OP_GT "OP_GT"
# define TOKEN_OP_LT "OP_LT"
# define TOKEN_OP_OR "OP_OR"
# define TOKEN_OP_AND "OP_AND"
# define TOKEN_OP_NOT "OP_NOT"
# define TOKEN_OP_OR_BIN "OP_OR_BIN"
# define TOKEN_OP_AND_BIN "OP_AND_BIN"
# define TOKEN_OP_XOR_BIN "OR_BIN"
# define TOKEN_OP_SUM "OP_SUM"
# define TOKEN_OP_SUB "OP_SUB"
# define TOKEN_OP_DIV "OP_DIV"
# define TOKEN_OP_MUL "OP_MUL"
# define TOKEN_OP_ASIG "OP_ASIG"
# define TOKEN_OP_MOD "OP_MOD"

# define TOKEN_MAX_LEN 32
# define LEXEMA_MAX_LEN 100

typedef struct token_s {
  char token[TOKEN_MAX_LEN];
  char lexema[LEXEMA_MAX_LEN];
} token_t;

# endif